#===========================================================
#  	Rio logging configuration file
#===========================================================

#config=org.rioproject.log.LoggingConfigurationInit

#===========================================================
# Global logging properties.
#===========================================================

# Comma separated list of log Handler classes
# These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
handlers=org.rioproject.log.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# Loggers and Handlers may override this level
.level=INFO

#===========================================================
# Handler specific properties.
#===========================================================

#===========================================================
# ConsoleHandler
# --------------
# (1) Overrides the global logging level
# (2) Uses the RioLogFormatter to format output
#===========================================================
java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=org.rioproject.log.RioLogFormatter

#===========================================================
# FileHandler
# -----------
# (1) Overrides the global logging level
# (2) Naming style for the output file: The output file is placed in the directory
# defined by the "RIO_LOG_DIR" System property, with a name based on the "org.rioproject.service" System property
# (3) Limiting size of output file in bytes
# (4) Number of output files to cycle through, by appending an integer to the base file name
# (5) Uses the RioLogFormatter to format output
#===========================================================
org.rioproject.log.FileHandler.pattern=${RIO_LOG_DIR}/${org.rioproject.service}%u.log
org.rioproject.log.FileHandler.level=ALL
org.rioproject.log.FileHandler.limit=50000
org.rioproject.log.FileHandler.count=1
org.rioproject.log.FileHandler.formatter=org.rioproject.log.RioLogFormatter

#===========================================================
# Format options for the RioLogFormatter
#===========================================================
# The default is to strip the package name from the class name. If you want to show the
# fully qualified classname with the log record, uncomment the line below
# org.rioproject.log.RioLogFormatter.includePackageNames=true

# The default is to use colors for log levels. If you want to turn colorization off, comment
# out the following line
org.rioproject.log.RioLogFormatter.colorize=true

# You can set the colors to use for logging levels. The available colors are:
#
# LIGHT_RED, LIGHT_GREEN, LIGHT_YELLOW, LIGHT_BLUE, LIGHT_MAGENTA, LIGHT_CYAN, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN
#
# The following levels have not been set for colorization. If you want them colorized, just add them below with a
# corresponding color from above
# INFO, CONFIG, FINE, FINER, FINEST

org.rioproject.log.RioLogFormatter.SEVERE=RED
org.rioproject.log.RioLogFormatter.WARNING=LIGHT_YELLOW

#===========================================================
# Loggers
#===========================================================
org.rioproject.cybernode.level=CONFIG
org.rioproject.cybernode.loader.level=FINEST
org.rioproject.config.level=INFO
org.rioproject.resources.servicecore.level=INFO
org.rioproject.system=INFO

org.rioproject.monitor.level = FINER
org.rioproject.monitor.sbi.level = FINE
org.rioproject.monitor.provision.level = FINER
org.rioproject.monitor.selector.level = OFF
org.rioproject.monitor.services.level = FINEST
org.rioproject.resolver.aether.level = OFF

net.jini.discovery.LookupDiscovery.level=OFF
net.jini.lookup.JoinManager.level=OFF


